Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"

CODE:
import java.util.*;
public class Main {
    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
        String s="babad";
        int n=s.length();
        int count=0;
        String res="";
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                String str=s.substring(i,j+1);
                StringBuilder sb=new StringBuilder(str);
                sb.reverse();
                //boolean res=str.equals(sb.toString());
                //System.out.println(res+" "+str+" "+sb);
                if(str.equals(sb.toString()))
                {
                   int c=str.length();
                   if(c>count)
                   {
                       res="";
                       res=res+str;
                       count=c;
                   }
                }
            }
        }
        System.out.print(res);
    }
}

OR

CODE:

class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int[] ans = new int[]{0, 0};
        
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        
        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
                ans[0] = i;
                ans[1] = i + 1;
            }
        }
        
        for (int diff = 2; diff < n; diff++) {
            for (int i = 0; i < n - diff; i++) {
                int j = i + diff;
                if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {
                    dp[i][j] = true;
                    ans[0] = i;
                    ans[1] = j;
                }
            }
        }
        
        int i = ans[0];
        int j = ans[1];
        return s.substring(i, j + 1);
    }
}
